// Implementation file for parser generated by fsyacc
module Feint.Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Feint
open Feint.Util

# 11 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | FEED
  | EQ
  | SUB_EQ
  | ADD_EQ
  | DIV_EQ
  | MUL_EQ
  | GT_OR_EQ
  | GT
  | LT_OR_EQ
  | LT
  | NOT_EQ
  | EQ_EQ
  | NOT_EQ_EQ
  | EQ_EQ_EQ
  | DOLLAR_NOT
  | DOLLAR_DOLLAR
  | NIL_OR
  | OR
  | AND
  | DOT
  | DASH
  | PLUS
  | PERCENT
  | DOUBLE_SLASH
  | SLASH
  | STAR
  | CARET
  | BANG_BANG
  | BANG
  | COMMA
  | SPECIAL_IDENT of (string)
  | IDENT of (string)
  | STR of (string)
  | FLOAT of (float)
  | INT of (bigint)
  | PRINT
  | MATCH
  | ELSE
  | IF
  | BLOCK
  | FALSE
  | TRUE
  | NIL
  | RBRACKET
  | LBRACKET
  | RBRACE
  | LBRACE
  | RPAREN
  | LPAREN
  | INLINE_FUNC_START
  | FUNC_START
  | INLINE_SCOPE_START
  | SCOPE_START
  | DOC_COMMENT of (string)
  | COMMENT of (string)
  | EOF
  | DEDENT
  | INDENT of (int)
  | NL
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_FEED
    | TOKEN_EQ
    | TOKEN_SUB_EQ
    | TOKEN_ADD_EQ
    | TOKEN_DIV_EQ
    | TOKEN_MUL_EQ
    | TOKEN_GT_OR_EQ
    | TOKEN_GT
    | TOKEN_LT_OR_EQ
    | TOKEN_LT
    | TOKEN_NOT_EQ
    | TOKEN_EQ_EQ
    | TOKEN_NOT_EQ_EQ
    | TOKEN_EQ_EQ_EQ
    | TOKEN_DOLLAR_NOT
    | TOKEN_DOLLAR_DOLLAR
    | TOKEN_NIL_OR
    | TOKEN_OR
    | TOKEN_AND
    | TOKEN_DOT
    | TOKEN_DASH
    | TOKEN_PLUS
    | TOKEN_PERCENT
    | TOKEN_DOUBLE_SLASH
    | TOKEN_SLASH
    | TOKEN_STAR
    | TOKEN_CARET
    | TOKEN_BANG_BANG
    | TOKEN_BANG
    | TOKEN_COMMA
    | TOKEN_SPECIAL_IDENT
    | TOKEN_IDENT
    | TOKEN_STR
    | TOKEN_FLOAT
    | TOKEN_INT
    | TOKEN_PRINT
    | TOKEN_MATCH
    | TOKEN_ELSE
    | TOKEN_IF
    | TOKEN_BLOCK
    | TOKEN_FALSE
    | TOKEN_TRUE
    | TOKEN_NIL
    | TOKEN_RBRACKET
    | TOKEN_LBRACKET
    | TOKEN_RBRACE
    | TOKEN_LBRACE
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_INLINE_FUNC_START
    | TOKEN_FUNC_START
    | TOKEN_INLINE_SCOPE_START
    | TOKEN_SCOPE_START
    | TOKEN_DOC_COMMENT
    | TOKEN_COMMENT
    | TOKEN_EOF
    | TOKEN_DEDENT
    | TOKEN_INDENT
    | TOKEN_NL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startModule
    | NONTERM_Module
    | NONTERM_StatementList
    | NONTERM_Statement
    | NONTERM_Comment
    | NONTERM_Expr
    | NONTERM_Block
    | NONTERM_Operation
    | NONTERM_Assignment
    | NONTERM_Atom
    | NONTERM_UnaryOp
    | NONTERM_BinaryOp
    | NONTERM_ShortCircuitOp
    | NONTERM_CompareOp
    | NONTERM_InPlaceOp

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | FEED  -> 0 
  | EQ  -> 1 
  | SUB_EQ  -> 2 
  | ADD_EQ  -> 3 
  | DIV_EQ  -> 4 
  | MUL_EQ  -> 5 
  | GT_OR_EQ  -> 6 
  | GT  -> 7 
  | LT_OR_EQ  -> 8 
  | LT  -> 9 
  | NOT_EQ  -> 10 
  | EQ_EQ  -> 11 
  | NOT_EQ_EQ  -> 12 
  | EQ_EQ_EQ  -> 13 
  | DOLLAR_NOT  -> 14 
  | DOLLAR_DOLLAR  -> 15 
  | NIL_OR  -> 16 
  | OR  -> 17 
  | AND  -> 18 
  | DOT  -> 19 
  | DASH  -> 20 
  | PLUS  -> 21 
  | PERCENT  -> 22 
  | DOUBLE_SLASH  -> 23 
  | SLASH  -> 24 
  | STAR  -> 25 
  | CARET  -> 26 
  | BANG_BANG  -> 27 
  | BANG  -> 28 
  | COMMA  -> 29 
  | SPECIAL_IDENT _ -> 30 
  | IDENT _ -> 31 
  | STR _ -> 32 
  | FLOAT _ -> 33 
  | INT _ -> 34 
  | PRINT  -> 35 
  | MATCH  -> 36 
  | ELSE  -> 37 
  | IF  -> 38 
  | BLOCK  -> 39 
  | FALSE  -> 40 
  | TRUE  -> 41 
  | NIL  -> 42 
  | RBRACKET  -> 43 
  | LBRACKET  -> 44 
  | RBRACE  -> 45 
  | LBRACE  -> 46 
  | RPAREN  -> 47 
  | LPAREN  -> 48 
  | INLINE_FUNC_START  -> 49 
  | FUNC_START  -> 50 
  | INLINE_SCOPE_START  -> 51 
  | SCOPE_START  -> 52 
  | DOC_COMMENT _ -> 53 
  | COMMENT _ -> 54 
  | EOF  -> 55 
  | DEDENT  -> 56 
  | INDENT _ -> 57 
  | NL  -> 58 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_FEED 
  | 1 -> TOKEN_EQ 
  | 2 -> TOKEN_SUB_EQ 
  | 3 -> TOKEN_ADD_EQ 
  | 4 -> TOKEN_DIV_EQ 
  | 5 -> TOKEN_MUL_EQ 
  | 6 -> TOKEN_GT_OR_EQ 
  | 7 -> TOKEN_GT 
  | 8 -> TOKEN_LT_OR_EQ 
  | 9 -> TOKEN_LT 
  | 10 -> TOKEN_NOT_EQ 
  | 11 -> TOKEN_EQ_EQ 
  | 12 -> TOKEN_NOT_EQ_EQ 
  | 13 -> TOKEN_EQ_EQ_EQ 
  | 14 -> TOKEN_DOLLAR_NOT 
  | 15 -> TOKEN_DOLLAR_DOLLAR 
  | 16 -> TOKEN_NIL_OR 
  | 17 -> TOKEN_OR 
  | 18 -> TOKEN_AND 
  | 19 -> TOKEN_DOT 
  | 20 -> TOKEN_DASH 
  | 21 -> TOKEN_PLUS 
  | 22 -> TOKEN_PERCENT 
  | 23 -> TOKEN_DOUBLE_SLASH 
  | 24 -> TOKEN_SLASH 
  | 25 -> TOKEN_STAR 
  | 26 -> TOKEN_CARET 
  | 27 -> TOKEN_BANG_BANG 
  | 28 -> TOKEN_BANG 
  | 29 -> TOKEN_COMMA 
  | 30 -> TOKEN_SPECIAL_IDENT 
  | 31 -> TOKEN_IDENT 
  | 32 -> TOKEN_STR 
  | 33 -> TOKEN_FLOAT 
  | 34 -> TOKEN_INT 
  | 35 -> TOKEN_PRINT 
  | 36 -> TOKEN_MATCH 
  | 37 -> TOKEN_ELSE 
  | 38 -> TOKEN_IF 
  | 39 -> TOKEN_BLOCK 
  | 40 -> TOKEN_FALSE 
  | 41 -> TOKEN_TRUE 
  | 42 -> TOKEN_NIL 
  | 43 -> TOKEN_RBRACKET 
  | 44 -> TOKEN_LBRACKET 
  | 45 -> TOKEN_RBRACE 
  | 46 -> TOKEN_LBRACE 
  | 47 -> TOKEN_RPAREN 
  | 48 -> TOKEN_LPAREN 
  | 49 -> TOKEN_INLINE_FUNC_START 
  | 50 -> TOKEN_FUNC_START 
  | 51 -> TOKEN_INLINE_SCOPE_START 
  | 52 -> TOKEN_SCOPE_START 
  | 53 -> TOKEN_DOC_COMMENT 
  | 54 -> TOKEN_COMMENT 
  | 55 -> TOKEN_EOF 
  | 56 -> TOKEN_DEDENT 
  | 57 -> TOKEN_INDENT 
  | 58 -> TOKEN_NL 
  | 61 -> TOKEN_end_of_input
  | 59 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startModule 
    | 1 -> NONTERM_Module 
    | 2 -> NONTERM_Module 
    | 3 -> NONTERM_StatementList 
    | 4 -> NONTERM_StatementList 
    | 5 -> NONTERM_Statement 
    | 6 -> NONTERM_Statement 
    | 7 -> NONTERM_Comment 
    | 8 -> NONTERM_Comment 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | 11 -> NONTERM_Expr 
    | 12 -> NONTERM_Expr 
    | 13 -> NONTERM_Expr 
    | 14 -> NONTERM_Expr 
    | 15 -> NONTERM_Block 
    | 16 -> NONTERM_Block 
    | 17 -> NONTERM_Operation 
    | 18 -> NONTERM_Operation 
    | 19 -> NONTERM_Operation 
    | 20 -> NONTERM_Operation 
    | 21 -> NONTERM_Operation 
    | 22 -> NONTERM_Assignment 
    | 23 -> NONTERM_Assignment 
    | 24 -> NONTERM_Atom 
    | 25 -> NONTERM_Atom 
    | 26 -> NONTERM_Atom 
    | 27 -> NONTERM_Atom 
    | 28 -> NONTERM_Atom 
    | 29 -> NONTERM_Atom 
    | 30 -> NONTERM_Atom 
    | 31 -> NONTERM_Atom 
    | 32 -> NONTERM_UnaryOp 
    | 33 -> NONTERM_UnaryOp 
    | 34 -> NONTERM_BinaryOp 
    | 35 -> NONTERM_BinaryOp 
    | 36 -> NONTERM_BinaryOp 
    | 37 -> NONTERM_BinaryOp 
    | 38 -> NONTERM_BinaryOp 
    | 39 -> NONTERM_BinaryOp 
    | 40 -> NONTERM_BinaryOp 
    | 41 -> NONTERM_BinaryOp 
    | 42 -> NONTERM_ShortCircuitOp 
    | 43 -> NONTERM_ShortCircuitOp 
    | 44 -> NONTERM_ShortCircuitOp 
    | 45 -> NONTERM_CompareOp 
    | 46 -> NONTERM_CompareOp 
    | 47 -> NONTERM_CompareOp 
    | 48 -> NONTERM_CompareOp 
    | 49 -> NONTERM_CompareOp 
    | 50 -> NONTERM_CompareOp 
    | 51 -> NONTERM_CompareOp 
    | 52 -> NONTERM_CompareOp 
    | 53 -> NONTERM_CompareOp 
    | 54 -> NONTERM_CompareOp 
    | 55 -> NONTERM_InPlaceOp 
    | 56 -> NONTERM_InPlaceOp 
    | 57 -> NONTERM_InPlaceOp 
    | 58 -> NONTERM_InPlaceOp 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 61 
let _fsyacc_tagOfErrorTerminal = 59

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | FEED  -> "FEED" 
  | EQ  -> "EQ" 
  | SUB_EQ  -> "SUB_EQ" 
  | ADD_EQ  -> "ADD_EQ" 
  | DIV_EQ  -> "DIV_EQ" 
  | MUL_EQ  -> "MUL_EQ" 
  | GT_OR_EQ  -> "GT_OR_EQ" 
  | GT  -> "GT" 
  | LT_OR_EQ  -> "LT_OR_EQ" 
  | LT  -> "LT" 
  | NOT_EQ  -> "NOT_EQ" 
  | EQ_EQ  -> "EQ_EQ" 
  | NOT_EQ_EQ  -> "NOT_EQ_EQ" 
  | EQ_EQ_EQ  -> "EQ_EQ_EQ" 
  | DOLLAR_NOT  -> "DOLLAR_NOT" 
  | DOLLAR_DOLLAR  -> "DOLLAR_DOLLAR" 
  | NIL_OR  -> "NIL_OR" 
  | OR  -> "OR" 
  | AND  -> "AND" 
  | DOT  -> "DOT" 
  | DASH  -> "DASH" 
  | PLUS  -> "PLUS" 
  | PERCENT  -> "PERCENT" 
  | DOUBLE_SLASH  -> "DOUBLE_SLASH" 
  | SLASH  -> "SLASH" 
  | STAR  -> "STAR" 
  | CARET  -> "CARET" 
  | BANG_BANG  -> "BANG_BANG" 
  | BANG  -> "BANG" 
  | COMMA  -> "COMMA" 
  | SPECIAL_IDENT _ -> "SPECIAL_IDENT" 
  | IDENT _ -> "IDENT" 
  | STR _ -> "STR" 
  | FLOAT _ -> "FLOAT" 
  | INT _ -> "INT" 
  | PRINT  -> "PRINT" 
  | MATCH  -> "MATCH" 
  | ELSE  -> "ELSE" 
  | IF  -> "IF" 
  | BLOCK  -> "BLOCK" 
  | FALSE  -> "FALSE" 
  | TRUE  -> "TRUE" 
  | NIL  -> "NIL" 
  | RBRACKET  -> "RBRACKET" 
  | LBRACKET  -> "LBRACKET" 
  | RBRACE  -> "RBRACE" 
  | LBRACE  -> "LBRACE" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | INLINE_FUNC_START  -> "INLINE_FUNC_START" 
  | FUNC_START  -> "FUNC_START" 
  | INLINE_SCOPE_START  -> "INLINE_SCOPE_START" 
  | SCOPE_START  -> "SCOPE_START" 
  | DOC_COMMENT _ -> "DOC_COMMENT" 
  | COMMENT _ -> "COMMENT" 
  | EOF  -> "EOF" 
  | DEDENT  -> "DEDENT" 
  | INDENT _ -> "INDENT" 
  | NL  -> "NL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | FEED  -> (null : System.Object) 
  | EQ  -> (null : System.Object) 
  | SUB_EQ  -> (null : System.Object) 
  | ADD_EQ  -> (null : System.Object) 
  | DIV_EQ  -> (null : System.Object) 
  | MUL_EQ  -> (null : System.Object) 
  | GT_OR_EQ  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | LT_OR_EQ  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | NOT_EQ  -> (null : System.Object) 
  | EQ_EQ  -> (null : System.Object) 
  | NOT_EQ_EQ  -> (null : System.Object) 
  | EQ_EQ_EQ  -> (null : System.Object) 
  | DOLLAR_NOT  -> (null : System.Object) 
  | DOLLAR_DOLLAR  -> (null : System.Object) 
  | NIL_OR  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | DOT  -> (null : System.Object) 
  | DASH  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | PERCENT  -> (null : System.Object) 
  | DOUBLE_SLASH  -> (null : System.Object) 
  | SLASH  -> (null : System.Object) 
  | STAR  -> (null : System.Object) 
  | CARET  -> (null : System.Object) 
  | BANG_BANG  -> (null : System.Object) 
  | BANG  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | SPECIAL_IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | STR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | FLOAT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | PRINT  -> (null : System.Object) 
  | MATCH  -> (null : System.Object) 
  | ELSE  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | BLOCK  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | NIL  -> (null : System.Object) 
  | RBRACKET  -> (null : System.Object) 
  | LBRACKET  -> (null : System.Object) 
  | RBRACE  -> (null : System.Object) 
  | LBRACE  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | INLINE_FUNC_START  -> (null : System.Object) 
  | FUNC_START  -> (null : System.Object) 
  | INLINE_SCOPE_START  -> (null : System.Object) 
  | SCOPE_START  -> (null : System.Object) 
  | DOC_COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | COMMENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | EOF  -> (null : System.Object) 
  | DEDENT  -> (null : System.Object) 
  | INDENT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NL  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;2us;65535us;0us;3us;24us;6us;3us;65535us;0us;4us;7us;8us;24us;4us;3us;65535us;0us;9us;7us;9us;24us;9us;13us;65535us;0us;10us;7us;10us;18us;19us;20us;21us;24us;10us;25us;26us;27us;28us;35us;29us;36us;30us;37us;31us;38us;32us;40us;33us;41us;34us;13us;65535us;0us;14us;7us;14us;18us;14us;20us;14us;24us;14us;25us;14us;27us;14us;35us;14us;36us;14us;37us;14us;38us;14us;40us;14us;41us;14us;13us;65535us;0us;15us;7us;15us;18us;15us;20us;15us;24us;15us;25us;15us;27us;15us;35us;15us;36us;15us;37us;15us;38us;15us;40us;15us;41us;15us;13us;65535us;0us;16us;7us;16us;18us;16us;20us;16us;24us;16us;25us;16us;27us;16us;35us;16us;36us;16us;37us;16us;38us;16us;40us;16us;41us;16us;13us;65535us;0us;17us;7us;17us;18us;17us;20us;17us;24us;17us;25us;17us;27us;17us;35us;17us;36us;17us;37us;17us;38us;17us;40us;17us;41us;17us;13us;65535us;0us;27us;7us;27us;18us;27us;20us;27us;24us;27us;25us;27us;27us;27us;35us;27us;36us;27us;37us;27us;38us;27us;40us;27us;41us;27us;11us;65535us;10us;35us;19us;35us;21us;35us;26us;35us;28us;35us;29us;35us;30us;35us;31us;35us;32us;35us;33us;35us;34us;35us;11us;65535us;10us;36us;19us;36us;21us;36us;26us;36us;28us;36us;29us;36us;30us;36us;31us;36us;32us;36us;33us;36us;34us;36us;11us;65535us;10us;37us;19us;37us;21us;37us;26us;37us;28us;37us;29us;37us;30us;37us;31us;37us;32us;37us;33us;37us;34us;37us;11us;65535us;10us;38us;19us;38us;21us;38us;26us;38us;28us;38us;29us;38us;30us;38us;31us;38us;32us;38us;33us;38us;34us;38us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;6us;10us;14us;28us;42us;56us;70us;84us;98us;110us;122us;134us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;2us;2us;4us;1us;3us;1us;3us;2us;4us;15us;1us;4us;1us;4us;1us;5us;5us;6us;18us;19us;20us;21us;1us;6us;1us;7us;1us;8us;1us;9us;1us;10us;1us;11us;1us;12us;1us;13us;5us;13us;18us;19us;20us;21us;1us;14us;5us;14us;18us;19us;20us;21us;1us;14us;2us;15us;16us;1us;15us;1us;16us;5us;16us;18us;19us;20us;21us;1us;17us;5us;17us;18us;19us;20us;21us;5us;18us;18us;19us;20us;21us;5us;18us;19us;19us;20us;21us;5us;18us;19us;20us;20us;21us;5us;18us;19us;20us;21us;21us;5us;18us;19us;20us;21us;22us;5us;18us;19us;20us;21us;23us;1us;18us;1us;19us;1us;20us;1us;21us;3us;22us;23us;30us;1us;22us;1us;23us;1us;24us;1us;25us;1us;26us;1us;27us;1us;28us;1us;29us;1us;31us;1us;32us;1us;33us;1us;34us;1us;35us;1us;36us;1us;37us;1us;38us;1us;39us;1us;40us;1us;41us;1us;42us;1us;43us;1us;44us;1us;45us;1us;46us;1us;47us;1us;48us;1us;49us;1us;50us;1us;51us;1us;52us;1us;53us;1us;54us;1us;55us;1us;56us;1us;57us;1us;58us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;9us;11us;13us;16us;18us;20us;22us;28us;30us;32us;34us;36us;38us;40us;42us;44us;50us;52us;58us;60us;63us;65us;67us;73us;75us;81us;87us;93us;99us;105us;111us;117us;119us;121us;123us;125us;129us;131us;133us;135us;137us;139us;141us;143us;145us;147us;149us;151us;153us;155us;157us;159us;161us;163us;165us;167us;169us;171us;173us;175us;177us;179us;181us;183us;185us;187us;189us;191us;193us;195us;197us;199us;|]
let _fsyacc_action_rows = 76
let _fsyacc_actionTableElements = [|16us;32768us;27us;50us;28us;49us;30us;48us;31us;39us;32us;47us;33us;46us;34us;45us;35us;18us;39us;23us;40us;44us;41us;43us;42us;42us;48us;20us;53us;13us;54us;12us;55us;2us;0us;49152us;0us;16385us;1us;16386us;58us;7us;1us;32768us;58us;5us;0us;16387us;1us;16399us;58us;7us;15us;32768us;27us;50us;28us;49us;30us;48us;31us;39us;32us;47us;33us;46us;34us;45us;35us;18us;39us;23us;40us;44us;41us;43us;42us;42us;48us;20us;53us;13us;54us;12us;0us;16388us;0us;16389us;26us;32768us;2us;75us;3us;74us;4us;73us;5us;72us;6us;71us;7us;70us;8us;69us;9us;68us;10us;67us;11us;66us;12us;65us;13us;64us;14us;63us;15us;62us;16us;61us;17us;60us;18us;59us;19us;58us;20us;57us;21us;56us;22us;55us;23us;54us;24us;53us;25us;52us;26us;51us;58us;11us;0us;16390us;0us;16391us;0us;16392us;0us;16393us;0us;16394us;0us;16395us;0us;16396us;13us;32768us;27us;50us;28us;49us;30us;48us;31us;39us;32us;47us;33us;46us;34us;45us;35us;18us;39us;23us;40us;44us;41us;43us;42us;42us;48us;20us;1us;16397us;19us;58us;13us;32768us;27us;50us;28us;49us;30us;48us;31us;39us;32us;47us;33us;46us;34us;45us;35us;18us;39us;23us;40us;44us;41us;43us;42us;42us;48us;20us;26us;32768us;2us;75us;3us;74us;4us;73us;5us;72us;6us;71us;7us;70us;8us;69us;9us;68us;10us;67us;11us;66us;12us;65us;13us;64us;14us;63us;15us;62us;16us;61us;17us;60us;18us;59us;19us;58us;20us;57us;21us;56us;22us;55us;23us;54us;24us;53us;25us;52us;26us;51us;47us;22us;0us;16398us;2us;32768us;51us;25us;52us;24us;15us;32768us;27us;50us;28us;49us;30us;48us;31us;39us;32us;47us;33us;46us;34us;45us;35us;18us;39us;23us;40us;44us;41us;43us;42us;42us;48us;20us;53us;13us;54us;12us;13us;32768us;27us;50us;28us;49us;30us;48us;31us;39us;32us;47us;33us;46us;34us;45us;35us;18us;39us;23us;40us;44us;41us;43us;42us;42us;48us;20us;25us;16400us;2us;75us;3us;74us;4us;73us;5us;72us;6us;71us;7us;70us;8us;69us;9us;68us;10us;67us;11us;66us;12us;65us;13us;64us;14us;63us;15us;62us;16us;61us;17us;60us;18us;59us;19us;58us;20us;57us;21us;56us;22us;55us;23us;54us;24us;53us;25us;52us;26us;51us;13us;32768us;27us;50us;28us;49us;30us;48us;31us;39us;32us;47us;33us;46us;34us;45us;35us;18us;39us;23us;40us;44us;41us;43us;42us;42us;48us;20us;25us;16401us;2us;75us;3us;74us;4us;73us;5us;72us;6us;71us;7us;70us;8us;69us;9us;68us;10us;67us;11us;66us;12us;65us;13us;64us;14us;63us;15us;62us;16us;61us;17us;60us;18us;59us;19us;58us;20us;57us;21us;56us;22us;55us;23us;54us;24us;53us;25us;52us;26us;51us;25us;16402us;2us;75us;3us;74us;4us;73us;5us;72us;6us;71us;7us;70us;8us;69us;9us;68us;10us;67us;11us;66us;12us;65us;13us;64us;14us;63us;15us;62us;16us;61us;17us;60us;18us;59us;19us;58us;20us;57us;21us;56us;22us;55us;23us;54us;24us;53us;25us;52us;26us;51us;25us;16403us;2us;75us;3us;74us;4us;73us;5us;72us;6us;71us;7us;70us;8us;69us;9us;68us;10us;67us;11us;66us;12us;65us;13us;64us;14us;63us;15us;62us;16us;61us;17us;60us;18us;59us;19us;58us;20us;57us;21us;56us;22us;55us;23us;54us;24us;53us;25us;52us;26us;51us;25us;16404us;2us;75us;3us;74us;4us;73us;5us;72us;6us;71us;7us;70us;8us;69us;9us;68us;10us;67us;11us;66us;12us;65us;13us;64us;14us;63us;15us;62us;16us;61us;17us;60us;18us;59us;19us;58us;20us;57us;21us;56us;22us;55us;23us;54us;24us;53us;25us;52us;26us;51us;25us;16405us;2us;75us;3us;74us;4us;73us;5us;72us;6us;71us;7us;70us;8us;69us;9us;68us;10us;67us;11us;66us;12us;65us;13us;64us;14us;63us;15us;62us;16us;61us;17us;60us;18us;59us;19us;58us;20us;57us;21us;56us;22us;55us;23us;54us;24us;53us;25us;52us;26us;51us;25us;16406us;2us;75us;3us;74us;4us;73us;5us;72us;6us;71us;7us;70us;8us;69us;9us;68us;10us;67us;11us;66us;12us;65us;13us;64us;14us;63us;15us;62us;16us;61us;17us;60us;18us;59us;19us;58us;20us;57us;21us;56us;22us;55us;23us;54us;24us;53us;25us;52us;26us;51us;25us;16407us;2us;75us;3us;74us;4us;73us;5us;72us;6us;71us;7us;70us;8us;69us;9us;68us;10us;67us;11us;66us;12us;65us;13us;64us;14us;63us;15us;62us;16us;61us;17us;60us;18us;59us;19us;58us;20us;57us;21us;56us;22us;55us;23us;54us;24us;53us;25us;52us;26us;51us;13us;32768us;27us;50us;28us;49us;30us;48us;31us;39us;32us;47us;33us;46us;34us;45us;35us;18us;39us;23us;40us;44us;41us;43us;42us;42us;48us;20us;13us;32768us;27us;50us;28us;49us;30us;48us;31us;39us;32us;47us;33us;46us;34us;45us;35us;18us;39us;23us;40us;44us;41us;43us;42us;42us;48us;20us;13us;32768us;27us;50us;28us;49us;30us;48us;31us;39us;32us;47us;33us;46us;34us;45us;35us;18us;39us;23us;40us;44us;41us;43us;42us;42us;48us;20us;13us;32768us;27us;50us;28us;49us;30us;48us;31us;39us;32us;47us;33us;46us;34us;45us;35us;18us;39us;23us;40us;44us;41us;43us;42us;42us;48us;20us;2us;16414us;0us;41us;1us;40us;13us;32768us;27us;50us;28us;49us;30us;48us;31us;39us;32us;47us;33us;46us;34us;45us;35us;18us;39us;23us;40us;44us;41us;43us;42us;42us;48us;20us;13us;32768us;27us;50us;28us;49us;30us;48us;31us;39us;32us;47us;33us;46us;34us;45us;35us;18us;39us;23us;40us;44us;41us;43us;42us;42us;48us;20us;0us;16408us;0us;16409us;0us;16410us;0us;16411us;0us;16412us;0us;16413us;0us;16415us;0us;16416us;0us;16417us;0us;16418us;0us;16419us;0us;16420us;0us;16421us;0us;16422us;0us;16423us;0us;16424us;0us;16425us;0us;16426us;0us;16427us;0us;16428us;0us;16429us;0us;16430us;0us;16431us;0us;16432us;0us;16433us;0us;16434us;0us;16435us;0us;16436us;0us;16437us;0us;16438us;0us;16439us;0us;16440us;0us;16441us;0us;16442us;|]
let _fsyacc_actionTableRowOffsets = [|0us;17us;18us;19us;21us;23us;24us;26us;42us;43us;44us;71us;72us;73us;74us;75us;76us;77us;78us;92us;94us;108us;135us;136us;139us;155us;169us;195us;209us;235us;261us;287us;313us;339us;365us;391us;405us;419us;433us;447us;450us;464us;478us;479us;480us;481us;482us;483us;484us;485us;486us;487us;488us;489us;490us;491us;492us;493us;494us;495us;496us;497us;498us;499us;500us;501us;502us;503us;504us;505us;506us;507us;508us;509us;510us;511us;|]
let _fsyacc_reductionSymbolCounts = [|1us;1us;1us;2us;3us;1us;2us;1us;1us;1us;1us;1us;1us;2us;3us;3us;3us;2us;3us;3us;3us;3us;3us;3us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;2us;2us;3us;3us;4us;4us;5us;5us;5us;5us;5us;5us;6us;6us;7us;7us;7us;7us;7us;8us;8us;9us;9us;9us;9us;9us;9us;9us;9us;10us;10us;11us;11us;11us;11us;11us;11us;11us;11us;12us;12us;12us;13us;13us;13us;13us;13us;13us;13us;13us;13us;13us;14us;14us;14us;14us;|]
let _fsyacc_immediateActions = [|65535us;49152us;16385us;65535us;65535us;16387us;65535us;65535us;16388us;16389us;65535us;16390us;16391us;16392us;16393us;16394us;16395us;16396us;65535us;65535us;65535us;65535us;16398us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16408us;16409us;16410us;16411us;16412us;16413us;16415us;16416us;16417us;16418us;16419us;16420us;16421us;16422us;16423us;16424us;16425us;16426us;16427us;16428us;16429us;16430us;16431us;16432us;16433us;16434us;16435us;16436us;16437us;16438us;16439us;16440us;16441us;16442us;|]
let _fsyacc_reductions = lazy [|
# 486 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Ast.Statement list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startModule));
# 495 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 169 "Parser.fsy"
                               [] 
                   )
# 169 "Parser.fsy"
                 : Ast.Statement list));
# 505 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Ast.Statement list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 170 "Parser.fsy"
                                         dprintn "statement list"; List.rev _1 
                   )
# 170 "Parser.fsy"
                 : Ast.Statement list));
# 516 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Ast.Statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 175 "Parser.fsy"
                                        dprintn "statement"; [_1] 
                   )
# 175 "Parser.fsy"
                 : Ast.Statement list));
# 527 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Ast.Statement list in
            let _3 = parseState.GetInput(3) :?> Ast.Statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 176 "Parser.fsy"
                                                      dprintn "statement list NL statement"; _3 :: _1 
                   )
# 176 "Parser.fsy"
                 : Ast.Statement list));
# 539 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Ast.Statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 179 "Parser.fsy"
                                   _1 
                   )
# 179 "Parser.fsy"
                 : Ast.Statement));
# 550 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Ast.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 180 "Parser.fsy"
                                   Ast.ExprStatement _1 
                   )
# 180 "Parser.fsy"
                 : Ast.Statement));
# 561 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 183 "Parser.fsy"
                                   Ast.Comment _1 
                   )
# 183 "Parser.fsy"
                 : Ast.Statement));
# 572 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 184 "Parser.fsy"
                                       Ast.DocComment _1 
                   )
# 184 "Parser.fsy"
                 : Ast.Statement));
# 583 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Block in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 189 "Parser.fsy"
                                 _1 
                   )
# 189 "Parser.fsy"
                 : Ast.Expr));
# 594 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Operation in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 190 "Parser.fsy"
                                     _1 
                   )
# 190 "Parser.fsy"
                 : Ast.Expr));
# 605 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Assignment in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 191 "Parser.fsy"
                                      _1 
                   )
# 191 "Parser.fsy"
                 : Ast.Expr));
# 616 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Atom in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 192 "Parser.fsy"
                                _1 
                   )
# 192 "Parser.fsy"
                 : Ast.Expr));
# 627 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Ast.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 193 "Parser.fsy"
                                      Ast.Print [ _2 ] 
                   )
# 193 "Parser.fsy"
                 : Ast.Expr));
# 638 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> Ast.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 194 "Parser.fsy"
                                              _2 
                   )
# 194 "Parser.fsy"
                 : Ast.Expr));
# 649 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> Ast.Statement list in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 197 "Parser.fsy"
                                                           Ast.Block _3 
                   )
# 197 "Parser.fsy"
                 : 'gentype_Block));
# 660 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> Ast.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 198 "Parser.fsy"
                                                         Ast.Block [ Ast.ExprStatement _3 ] 
                   )
# 198 "Parser.fsy"
                 : 'gentype_Block));
# 671 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_UnaryOp in
            let _2 = parseState.GetInput(2) :?> Ast.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 201 "Parser.fsy"
                                        Ast.UnaryOp { op = _1; rhs = _2 } 
                   )
# 201 "Parser.fsy"
                 : 'gentype_Operation));
# 683 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Ast.Expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_BinaryOp in
            let _3 = parseState.GetInput(3) :?> Ast.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 202 "Parser.fsy"
                                              Ast.BinaryOp { lhs = _1; op = _2; rhs = _3 } 
                   )
# 202 "Parser.fsy"
                 : 'gentype_Operation));
# 696 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Ast.Expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_ShortCircuitOp in
            let _3 = parseState.GetInput(3) :?> Ast.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 203 "Parser.fsy"
                                                    Ast.ShortCircuitOp { lhs = _1; op = _2; rhs = _3 } 
                   )
# 203 "Parser.fsy"
                 : 'gentype_Operation));
# 709 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Ast.Expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_CompareOp in
            let _3 = parseState.GetInput(3) :?> Ast.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 204 "Parser.fsy"
                                               Ast.CompareOp { lhs = _1; op = _2; rhs = _3 } 
                   )
# 204 "Parser.fsy"
                 : 'gentype_Operation));
# 722 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Ast.Expr in
            let _2 = parseState.GetInput(2) :?> 'gentype_InPlaceOp in
            let _3 = parseState.GetInput(3) :?> Ast.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 205 "Parser.fsy"
                                               Ast.InPlaceOp { lhs = _1; op = _2; rhs = _3 } 
                   )
# 205 "Parser.fsy"
                 : 'gentype_Operation));
# 735 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> Ast.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 208 "Parser.fsy"
                                         Ast.Assignment { name = _1; value = _3 } 
                   )
# 208 "Parser.fsy"
                 : 'gentype_Assignment));
# 747 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> Ast.Expr in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 209 "Parser.fsy"
                                           Ast.Reassignment { name = _1; value = _3 } 
                   )
# 209 "Parser.fsy"
                 : 'gentype_Assignment));
# 759 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 212 "Parser.fsy"
                               Ast.Nil 
                   )
# 212 "Parser.fsy"
                 : 'gentype_Atom));
# 769 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 213 "Parser.fsy"
                                Ast.Bool true 
                   )
# 213 "Parser.fsy"
                 : 'gentype_Atom));
# 779 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 214 "Parser.fsy"
                                 Ast.Bool false 
                   )
# 214 "Parser.fsy"
                 : 'gentype_Atom));
# 789 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> bigint in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 215 "Parser.fsy"
                               Ast.Int _1 
                   )
# 215 "Parser.fsy"
                 : 'gentype_Atom));
# 800 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> float in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 216 "Parser.fsy"
                                 Ast.Float _1 
                   )
# 216 "Parser.fsy"
                 : 'gentype_Atom));
# 811 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 217 "Parser.fsy"
                               Ast.Str _1 
                   )
# 217 "Parser.fsy"
                 : 'gentype_Atom));
# 822 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 218 "Parser.fsy"
                                 Ast.Ident _1 
                   )
# 218 "Parser.fsy"
                 : 'gentype_Atom));
# 833 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 219 "Parser.fsy"
                                         Ast.SpecialIdent _1 
                   )
# 219 "Parser.fsy"
                 : 'gentype_Atom));
# 844 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 224 "Parser.fsy"
                                Ast.Not 
                   )
# 224 "Parser.fsy"
                 : 'gentype_UnaryOp));
# 854 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 225 "Parser.fsy"
                                     Ast.AsBool 
                   )
# 225 "Parser.fsy"
                 : 'gentype_UnaryOp));
# 864 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 228 "Parser.fsy"
                                 Ast.Pow 
                   )
# 228 "Parser.fsy"
                 : 'gentype_BinaryOp));
# 874 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 229 "Parser.fsy"
                                Ast.Mul 
                   )
# 229 "Parser.fsy"
                 : 'gentype_BinaryOp));
# 884 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 230 "Parser.fsy"
                                 Ast.Div 
                   )
# 230 "Parser.fsy"
                 : 'gentype_BinaryOp));
# 894 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 231 "Parser.fsy"
                                        Ast.FloorDiv 
                   )
# 231 "Parser.fsy"
                 : 'gentype_BinaryOp));
# 904 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 232 "Parser.fsy"
                                   Ast.Mod 
                   )
# 232 "Parser.fsy"
                 : 'gentype_BinaryOp));
# 914 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 233 "Parser.fsy"
                                Ast.Add 
                   )
# 233 "Parser.fsy"
                 : 'gentype_BinaryOp));
# 924 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 234 "Parser.fsy"
                                Ast.Sub 
                   )
# 234 "Parser.fsy"
                 : 'gentype_BinaryOp));
# 934 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 235 "Parser.fsy"
                               Ast.Dot 
                   )
# 235 "Parser.fsy"
                 : 'gentype_BinaryOp));
# 944 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 238 "Parser.fsy"
                               Ast.And 
                   )
# 238 "Parser.fsy"
                 : 'gentype_ShortCircuitOp));
# 954 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 239 "Parser.fsy"
                              Ast.Or 
                   )
# 239 "Parser.fsy"
                 : 'gentype_ShortCircuitOp));
# 964 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 240 "Parser.fsy"
                                  Ast.NilOr 
                   )
# 240 "Parser.fsy"
                 : 'gentype_ShortCircuitOp));
# 974 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 243 "Parser.fsy"
                                         Ast.DollarDollar 
                   )
# 243 "Parser.fsy"
                 : 'gentype_CompareOp));
# 984 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 244 "Parser.fsy"
                                      Ast.DollarNot 
                   )
# 244 "Parser.fsy"
                 : 'gentype_CompareOp));
# 994 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 245 "Parser.fsy"
                                    Ast.EqEqEq 
                   )
# 245 "Parser.fsy"
                 : 'gentype_CompareOp));
# 1004 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 246 "Parser.fsy"
                                     Ast.NotEqEq 
                   )
# 246 "Parser.fsy"
                 : 'gentype_CompareOp));
# 1014 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 247 "Parser.fsy"
                                 Ast.EqEq 
                   )
# 247 "Parser.fsy"
                 : 'gentype_CompareOp));
# 1024 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 248 "Parser.fsy"
                                  Ast.NotEq 
                   )
# 248 "Parser.fsy"
                 : 'gentype_CompareOp));
# 1034 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 249 "Parser.fsy"
                              Ast.LessThan 
                   )
# 249 "Parser.fsy"
                 : 'gentype_CompareOp));
# 1044 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 250 "Parser.fsy"
                                    Ast.LessThanEq 
                   )
# 250 "Parser.fsy"
                 : 'gentype_CompareOp));
# 1054 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 251 "Parser.fsy"
                              Ast.GreaterThan 
                   )
# 251 "Parser.fsy"
                 : 'gentype_CompareOp));
# 1064 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 252 "Parser.fsy"
                                    Ast.GreaterThanEq 
                   )
# 252 "Parser.fsy"
                 : 'gentype_CompareOp));
# 1074 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 255 "Parser.fsy"
                                  Ast.MulEq 
                   )
# 255 "Parser.fsy"
                 : 'gentype_InPlaceOp));
# 1084 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 256 "Parser.fsy"
                                  Ast.DivEq 
                   )
# 256 "Parser.fsy"
                 : 'gentype_InPlaceOp));
# 1094 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 257 "Parser.fsy"
                                  Ast.AddEq 
                   )
# 257 "Parser.fsy"
                 : 'gentype_InPlaceOp));
# 1104 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 258 "Parser.fsy"
                                  Ast.SubEq 
                   )
# 258 "Parser.fsy"
                 : 'gentype_InPlaceOp));
|]
# 1115 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 62;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let Module lexer lexbuf : Ast.Statement list =
    engine lexer lexbuf 0 :?> _
